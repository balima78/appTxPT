{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(DT)\n\n\n# data.frame com os dados do NewsTx\ndados<-read.csv2(\"NewsTx.csv\") \n\n# função para calcular coeficiente de correlação e valor de p\ncorr_eqn <- function(x,y, method='pearson', digits = 3) {\n  corr_coef <- round(cor.test(x, y, method=method)$estimate, digits = digits)\n  corr_pval <- round((cor.test(x,y, method=method)$p.value), digits = digits)\n  paste(method, 'r = ', corr_coef, ',', 'pval =', corr_pval)\n}\n\n#####################################\n# função para calcular cPRA\n# anticorpos HLA-A-B-DR para 1 doente\ncpra_1<-function(id = 1, sensib = acHLA,\n                 A_freq = read.csv2(\"CEDACE/hla_A.csv\"),\n                 B_freq = read.csv2(\"CEDACE/hla_B.csv\"),\n                 DR_freq = read.csv2(\"CEDACE/hla_DRB1.csv\"),\n                 AB_freq = read.csv2(\"CEDACE/hla_AB.csv\"),\n                 ADR_freq = read.csv2(\"CEDACE/hla_ADR.csv\"),\n                 BDR_freq = read.csv2(\"CEDACE/hla_BDR.csv\"),\n                 ABDR_freq = read.csv2(\"CEDACE/hla_ABDR.csv\")){\n  if(!require(dplyr)) {\n    message(\"instaling the 'dplyr' package\")\n    install.packages(\"dplyr\")\n    library(dplyr)\n  }  \n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% A_freq$AA)>=1){\n    Sa<-sum(A_freq %>% \n              filter(AA %in% sensib[sensib$ID == id,\"acs\"]) %>% \n              select(freq))\n  } else Sa<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% B_freq$BB)>=1){\n    Sb<-sum(B_freq %>% \n              filter(BB %in% sensib[sensib$ID == id,\"acs\"]) %>% \n              select(freq))\n  } else Sb<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% DR_freq$DDR)>=1){\n    Sdr<-sum(DR_freq %>% \n               filter(DDR %in% sensib[sensib$ID == id,\"acs\"]) %>% \n               select(freq))\n  } else Sdr<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% A_freq$AA &\n         sensib[sensib$ID == id,\"acs\"] %in% B_freq$BB) >=1){  \n    Sab<-sum(AB_freq %>% \n               filter(AA %in% sensib[sensib$ID == id,\"acs\"] &\n                        BB %in% sensib[sensib$ID == id,\"acs\"]) %>% \n               select(freq))\n  } else Sab<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% A_freq$AA &\n         sensib[sensib$ID == id,\"acs\"] %in% DR_freq$DDR) >=1){  \n    Sadr<-sum(ADR_freq %>% \n                filter(AA %in% sensib[sensib$ID == id,\"acs\"] &\n                         DDR %in% sensib[sensib$ID == id,\"acs\"]) %>% \n                select(freq))\n  } else Sadr<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% B_freq$BB &\n         sensib[sensib$ID == id,\"acs\"] %in% DR_freq$DDR) >=1){  \n    Sbdr<-sum(BDR_freq %>% \n                filter(DDR %in% sensib[sensib$ID == id,\"acs\"] &\n                         BB %in% sensib[sensib$ID == id,\"acs\"]) %>% \n                select(freq))\n  } else Sbdr<-0\n  \n  if(sum(sensib[sensib$ID == id,\"acs\"] %in% B_freq$BB &\n         sensib[sensib$ID == id,\"acs\"] %in% DR_freq$DDR &\n         sensib[sensib$ID == id,\"acs\"] %in% A_freq$AA)>=1){  \n    Sabdr<-sum(ABDR_freq %>% \n                 filter(AA %in% sensib[sensib$ID == id,\"acs\"] &\n                          BB %in% sensib[sensib$ID == id,\"acs\"] &\n                          DDR %in% sensib[sensib$ID == id,\"acs\"]) %>% \n                 select(freq))\n  } else Sabdr<-0\n  \n  cpraf<-1-(1-Sa-Sb-Sdr+Sab+Sbdr+Sadr-Sabdr)^2\n  cpraf\n  \n} \n\n#####################################\n\n\n\nshinyServer(function(input, output, session) {\n\n  dadosx<-reactive({dados %>% filter(Ano >= input$ano[1] & Ano <= input$ano[2])})\n  dadosxs<-reactive({dados %>% filter(Ano >= input$anos[1] & Ano <= input$anos[2])})\n  \n  dadost<-reactive({\n    gather(dadosx(),\"Indicadores\", \"valor\",2:13) %>%\n      filter(Indicadores == input$y1 | Indicadores == input$y2)\n  })\n  \n\n  # Nav1\n  ## tab1\n  output$evolPlot <- renderPlot({\n\n    b1<-ggplot(dadost(),aes_string(x=\"Ano\", y = \"valor\", fill= \"Indicadores\")) +\n      geom_bar(stat = \"identity\", position=position_dodge(), na.rm = T) +\n      scale_x_continuous(breaks = input$ano[1]:input$ano[2]) +\n      ylab(\"\") + \n      scale_fill_manual(values=c(\"red\",\"blue\")) +\n      theme_minimal() \n    \n    l1<-ggplot(dadost()) + geom_line(aes_string(x=\"Ano\", y=\"valor\", colour=\"Indicadores\"), size = 1.3) +\n      geom_point(aes_string(x=\"Ano\", y=\"valor\", colour=\"Indicadores\"), size = 4, alpha = 0.25) +\n      geom_point(aes_string(x=\"Ano\", y=\"valor\", colour=\"Indicadores\"), size = 1.75, color = \"white\") +\n      scale_colour_manual(values=c(\"red\",\"blue\")) +\n      scale_x_continuous(breaks = input$ano[1]:input$ano[2]) +\n      ylab(\"\") + \n      theme_minimal()\n    #l1<-ggplotly(l1)\n\n    if(input$tipo == \"linhas\") {\n      return(l1)\n    }\n    else if(input$tipo == \"barras\"){\n      return(b1)\n    }\n\n  })\n  \n\n  \n  output$corrPlot <- renderPlot({\n      g2 <- ggplot(dadosx(), aes_string(x=input$y2, y=input$y1)) + \n      geom_point() + stat_smooth(method=\"loess\", colour = \"red\") + \n        geom_label(\n        x = 0.95 * max(dadosx()[input$y2]),\n        y = 0.95 * max(dadosx()[input$y1]),\n        label = corr_eqn(dadosx()[[input$y1]], dadosx()[[input$y2]],\n                         method = 'spearman')\n        )\n      g2 + theme_minimal()\n      \n    }) \n  \n  output$movPlot <- renderPlotly({\n\n    dadosm<- dados %>% filter(Ano >= 2003 & Ano <= input$num)\n    \n    g3<-ggplot(dadosm, aes_string(x=\"Ano\", y=input$y1)) +\n      geom_line(colour = \"blue\", size = 1.3) +\n      scale_x_continuous(breaks = 2003:2016, limits = c(2003,2016)) +\n      scale_y_continuous(limits = c(min(dados[input$y1]*0.1, na.rm = T), \n                                    max(dados[input$y1]*1.1, na.rm = T))) +\n      scale_size_continuous(limits=c(150,350),\n                            breaks=c(200, 230, 260, 290, 320),\n                            range = c(1,25)) +\n      geom_point(aes(size = DadoresCadaver), alpha = 0.5, colour = \"red\") \n\n    \n    ggplotly(g3 + theme_minimal())\n    \n  })\n  \n  ## tab2\n  output$tabela <- DT::renderDataTable({\n    dadosxs()\n    })\n  \n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"dados\", \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv2(dadosxs(), \n                 file,row.names = T)\n    }\n  )\n  \n  ## tab3\n  output$legenda <- renderTable({\n    legenda<-data.frame(Codigo = names(dados),\n                        Descricao = c(\"Ano\",\n                                      \"População a meio do ano\",\n                                      \"nº de dadores cadáver\",\n                                      \"Dadores Cadáver por milhão de habitantes\",\n                                      \"nº de trasplantes com dador cadáver\",\n                                      \"transplantes com dador cadáver por milhão de habitantes\",\n                                      \"nº de transplantes com dador vivo\",\n                                      \"transplantes com dador vivo por milhão de habitantes\",\n                                      \"nº de inscrições incidentes em Lista de Espera\",\n                                      \"nº de doentes em Lista Activa a 31 de dezembro\",\n                                      \"nº de mortes em Lista de Espera\",\n                                      \"nº total de transplantes\",\n                                      \"total de transplantes por milhão de habitantes\"))\n    legenda\n    })\n  \n  # Nav2\n\n  observe({\n    if ( is.null(input$limpa) || input$limpa == 0)\n      return()\n    updateCheckboxGroupInput(session,\"hlaA\",\n                             choices = c(\"A*01\" = \"A1\",\"A*02\" = \"A2\",\"A*03\" = \"A3\",\"A*11\" = \"A11\",\"A*23\" = \"A23\",\"A*24\" = \"A24\",\"A*25\" = \"A25\",\"A*26\" = \"A26\",\"A*29\" = \"A29\",\"A*30\" = \"A30\",\"A*31\" = \"A31\",\"A*32\" = \"A32\",\"A*33\" = \"A33\",\"A*34\" = \"A34\",\"A*36\" = \"A36\",\"A*66\" = \"A66\",\"A*68\" = \"A68\",\"A*69\" = \"A69\",\"A*74\" = \"A74\",\"A*80\" = \"A80\"),\n                             inline = TRUE, \n                             selected=NULL)\n    updateCheckboxGroupInput(session,\"hlaC\",\n                             choices = c(\"C01\",\"C02\",\"C03\"),selected=NULL)\n    updateCheckboxGroupInput(session,\"hlaB\",\n                             choices = c('B*07'='B7','B*08'='B8','B*13'='B13','B*14'='B14','B*15'='B15','B*18'='B18','B*27'='B27','B*35'='B35','B*37'='B37','B*38'='B38','B*39'='B39','B*40'='B40','B*41'='B41','B*42'='B42','B*44'='B44','B*45'='B45','B*46'='B46','B*47'='B47','B*48'='B48','B*49'='B49','B*50'='B50','B*51'='B51','B*52'='B52','B*53'='B53','B*54'='B54','B*55'='B55','B*56'='B56','B*57'='B57','B*58'='B58','B*67'='B67','B*73'='B73','B*78'='B78','B*81'='B81','B*82'='B82'),\n                             inline = TRUE,\n                             selected=NULL)\n    updateCheckboxGroupInput(session,\"hlaDR\",\n                             choices = c('DRB1*01'='DR1','DRB1*03'='DR3','DRB1*04'='DR4','DRB1*07'='DR7','DRB1*08'='DR8','DRB1*09'='DR9','DRB1*10'='DR10','DRB1*11'='DR11','DRB1*12'='DR12','DRB1*13'='DR13','DRB1*14'='DR14','DRB1*15'='DR15','DRB1*16'='DR16'),\n                             inline = TRUE, \n                             selected=NULL)\n  })\n\n  output$A<-renderText(input$hlaA)\n  output$C<-renderText(input$hlaC)\n  output$B<-renderText(input$hlaB)\n  output$DR<-renderText(input$hlaDR)\n  \n  sens<-eventReactive(input$calcula, {\n    a<-input$hlaA\n    b<-input$hlaB\n    dr<-input$hlaDR\n    \n    acs<-c(a,b,dr)\n    \n    data.frame(ID=1, acs)\n  })\n  \n  #output$sensib<-renderTable(sens())\n\n  v <- reactiveValues(data = NULL)\n  \n  observeEvent(input$calcula, {\n    v$data <- sens()\n  })\n  \n  observeEvent(input$limpa, {\n    v$data <- NULL\n  })  \n  \n  output$cpra <- renderText({\n    if (is.null(v$data)) return()\n    paste(round(cpra_1(sensib = v$data)*100,2),\"%\")\n  })\n  \n  \n\n})\n\n\n\n\n\n\n",
    "created" : 1523118918113.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1329858268",
    "id" : "D4E8EA44",
    "lastKnownWriteTime" : 1523388194,
    "last_content_update" : 1523388194726,
    "path" : "D:/CHN/OpenData/appTxPT/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}